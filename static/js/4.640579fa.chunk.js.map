{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainerWithHooks.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","profile_status","onDoubleClick","profile","userId","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","error","stateEditMode","useForm","mode","control","errors","formState","handleSubmit","onSubmit","data","editProfile","Button","variant","type","style","formSummaryError","wrapper1","editProfileElement","name","defaultValue","fullName","rules","required","maxLength","message","render","field","TextField","size","label","helperText","lookingForAJob","Checkbox","checked","wrapper2","lookingForAJobDescription","multiline","rows","aboutMe","contacts","Object","keys","map","key","defVal","contact","ProfileData","isOwner","goToEditMode","onClick","info_box","contactTitle","contactValue","Contact","contactProfileInfo","ProfileINfo","hoveredAva","setHoveredAva","toggle","changeStateEditMode","auth","Preloader","Input","styled","display","descriptionBlock","src","photos","large","userPhoto","onMouseOver","btnFile","htmlFor","target","files","length","savePhoto","accept","id","multiple","onMouseLeave","component","initialValues","formData","saveProfile","then","Post","item","profileImg","time","date","likesCount","MyPosts","React","memo","postsElements","posts","p","postsBlock","values","addPost","newPostText","AddNewPostForm","isSubmitSuccessful","reset","something","styless","textArea","compose","connect","state","profilePage","isAuth","Profile","userIdUrl","MyPostsContainer","users","getUsers","formSaved","getUserProfile","getStatus","withRouter","withAuthRedirect","refreshProfile","match","params","history","push"],"mappings":"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","file":"static/js/4.640579fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"ProfileInfo_profilePage__3uDP-\",\"profile\":\"ProfileInfo_profile__2TFOu\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__q5UHZ\",\"status\":\"ProfileInfo_status__1YNjz\",\"profile_status\":\"ProfileInfo_profile_status__2PQFK\",\"addAva\":\"ProfileInfo_addAva__SrsKz\",\"contact\":\"ProfileInfo_contact__3fDxk\",\"contacts\":\"ProfileInfo_contacts__1eIST\",\"contactProfileInfo\":\"ProfileInfo_contactProfileInfo__2IGvi\",\"editProfile\":\"ProfileInfo_editProfile__3CTxE\",\"editProfileElement\":\"ProfileInfo_editProfileElement__3STzy\",\"wrapper1\":\"ProfileInfo_wrapper1__1Hz2R\",\"wrapper2\":\"ProfileInfo_wrapper2__3LHKn\",\"btnFile\":\"ProfileInfo_btnFile__3zv3q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2B-Hl\",\"posts\":\"MyPosts_posts__3ZgQ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1xJSY\",\"time\":\"Post_time__39JtH\"};","import React, {ChangeEvent, Component, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    profile: ProfileType\r\n    userId: number\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n            setStatus(props.status);\r\n        }, [props.status]\r\n    )\r\n\r\n    const activateEditMode = () => {\r\n        if (props.profile.userId === props.userId) {\r\n            setEditMode(true);\r\n        }\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n            <div className={s.profile_status}>\r\n                <b> Статус: </b> <span onDoubleClick={activateEditMode}> {props.status || \"-----\"} </span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\nconst ProfileDataForm = ({profile, error, stateEditMode, ...props}) => {\r\n    const {\r\n        control,\r\n        formState: {errors},\r\n        handleSubmit\r\n    } = useForm({mode: \"onBlur\"});\r\n\r\n    const onSubmit = (data) => {\r\n        props.onSubmit(data)\r\n    }\r\n    return <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n        <div className={s.editProfile}>\r\n            <div>\r\n                <Button variant=\"outlined\" type=\"submit\">Сохранить</Button>\r\n            </div>\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n\r\n            <div className={s.wrapper1}>\r\n                <div className={s.editProfileElement}>\r\n                    <h3><b> Full name: </b></h3>\r\n                    <Controller\r\n                        control={control}\r\n                        name=\"fullName\"\r\n                        defaultValue={profile.fullName}\r\n                        rules={{\r\n                            required: \"Поле обязательно к заполнению\", maxLength: {\r\n                                value: 20,\r\n                                message: \"Max length is 20 symbols\"\r\n                            }\r\n                        }}\r\n                        render={({field}) => (\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                size=\"small\"\r\n                                {...field}\r\n                                label=\"Введите ваше имя\"\r\n                                onChange={(e) => field.onChange(e)}\r\n                                value={field.value}\r\n                                error={errors.fullName?.message}\r\n                                helperText={errors.fullName?.message}\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.editProfileElement}>\r\n                    <b> Looking for a job: </b>\r\n                    <Controller\r\n                        control={control}\r\n                        name=\"lookingForAJob\"\r\n                        defaultValue={profile.lookingForAJob}\r\n                        render={({field: {onChange, value}}) => (\r\n                            <Checkbox\r\n                                checked={value}\r\n                                onChange={onChange}\r\n                                label=\"\"/>\r\n\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.wrapper2}>\r\n\r\n                <div className={s.editProfileElement}>\r\n                    <b>My professional skills: </b>\r\n                    <Controller\r\n                        control={control}\r\n                        name=\"lookingForAJobDescription\"\r\n                        defaultValue={profile.lookingForAJobDescription}\r\n                        rules={{ maxLength: {\r\n                                value: 100,\r\n                                message: \"Max length is 100 symbols\"\r\n                            }\r\n                        }}\r\n                        render={({field}) => (\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                multiline\r\n                                rows={3}\r\n                                {...field}\r\n                                label=\"My professional skills\"\r\n                                onChange={(e) => field.onChange(e)}\r\n                                value={field.value}\r\n                                error={errors.lookingForAJobDescription?.message}\r\n                                helperText={errors.lookingForAJobDescription?.message}\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.editProfileElement}>\r\n                    <b> About me: </b>\r\n                    <Controller\r\n                        control={control}\r\n                        name=\"aboutMe\"\r\n                        defaultValue={profile.aboutMe}\r\n                        rules={{ maxLength: {\r\n                                value: 100,\r\n                                message: \"Max length is 100 symbols\"\r\n                            }\r\n                        }}\r\n                        render={({field}) => (\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                multiline\r\n                                rows={3}\r\n                                {...field}\r\n                                label=\"About me\"\r\n                                onChange={(e) => field.onChange(e)}\r\n                                value={field.value}\r\n                                error={errors.aboutMe?.message}\r\n                                helperText={errors.aboutMe?.message}\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts:</b>\r\n                <div className={s.contacts}>{Object.keys(profile.contacts).map(key => {\r\n                    // let name=\"contacts.\" + key\r\n                    let defVal = profile.contacts.key\r\n\r\n                    return <div key={key} className={s.contact}>\r\n                        <b> {key}: </b>\r\n                        <div>\r\n                            <Controller\r\n                                control={control}\r\n                                name={\"contacts.\" + key}\r\n                                defaultValue={defVal}\r\n                                rules={{\r\n                                    maxLength: {\r\n                                        value: 5,\r\n                                        message: \"Max length is 100 symbols\"\r\n                                    }\r\n                                }}\r\n                                render={({field}) => (\r\n                                    <TextField\r\n                                        variant=\"filled\"\r\n                                        size=\"small\"\r\n                                        {...field}\r\n                                        label={key}\r\n                                        onChange={(e) => field.onChange(e)}\r\n                                        value={field.value}\r\n                                        error={errors.contacts?.message}\r\n                                        helperText={errors.contacts?.message}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            {/* <input {...register (\"name\", {*/}\r\n                            {/*})}placeholder={key} name={\"contacts.\" + key} /> */}\r\n\r\n                        </div>\r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n\r\n\r\n    //         <div>\r\n    //             <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n    //             return <div key={key} className={s.contact}>\r\n    //                 <b> {key}: <Field placeholder={key} name={\"contacts.\" + key} component={Input}/></b>\r\n    //             </div>\r\n    //         })}\r\n    //         </div>\r\n    //     </div>\r\n\r\n}\r\n\r\n\r\nexport default ProfileDataForm;\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport Button from \"@mui/material/Button\";\r\nimport styled from \"@mui/material/styles/styled\";\r\n\r\n// type PropsType = {\r\n//     changeStateEditMode: (toggle: boolean) => void\r\n//     profile: ProfileType\r\n//     auth: boolean\r\n//     savePhoto: (file: any) => void\r\n//     saveProfile: (formData: any) => void\r\n//     isOwner: number\r\n//     status: string\r\n//     updateStatus: (status: string) => void\r\n//     userId: number\r\n// }\r\nconst ProfileINfo = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [hoveredAva, setHoveredAva] = useState(false);\r\n    let stateEditMode = (toggle) => {\r\n        props.changeStateEditMode(toggle);\r\n    }\r\n\r\n    useEffect(() => {\r\n        stateEditMode(false)\r\n    }, [])\r\n\r\n    let hoverAva = () => {\r\n        setHoveredAva(true);\r\n    }\r\n\r\n    let unHoverAva = () => {\r\n        setHoveredAva(false);\r\n    }\r\n\r\n    if (!props.profile && props.auth) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n            stateEditMode(false)\r\n        })\r\n    }\r\n    const Input = styled('input')({\r\n        display: 'none',\r\n    });\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} onMouseOver={hoverAva} />\r\n                <div>\r\n                    {(props.isOwner && hoveredAva) &&\r\n                    // <input type={\"file\"} onChange={onMainPhotoSelected} onMouseLeave={unHoverAva}\r\n                    //        className={s.addAva}/>}\r\n                    <div className={s.btnFile}>\r\n                        <label htmlFor=\"contained-button-file\">\r\n                            <Input onChange={onMainPhotoSelected}  accept=\"image/*\"\r\n                                   id=\"contained-button-file\" multiple type=\"file\"/>\r\n                            <Button variant=\"outlined\" onMouseLeave={unHoverAva} component=\"span\">Загрузить фото</Button>\r\n                        </label>\r\n                    </div>}\r\n                </div>\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} userId={props.userId}\r\n                                        profile={props.profile}/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} profile={props.profile}\r\n                                       onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true);\r\n                                       stateEditMode(true)\r\n                                   }}/>}\r\n\r\n\r\n            </div>\r\n\r\n        </div>)\r\n}\r\n\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <Button variant=\"outlined\" onClick={goToEditMode}>Редактировать</Button>\r\n        </div>}\r\n        <div className={s.fullName}>\r\n            <h2><b>  {profile.fullName} </b></h2>\r\n        </div>\r\n\r\n        <div className={s.info_box}>\r\n\r\n            <div>\r\n                <b> Looking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            <div>\r\n                <b> My professional skills: </b> {profile.lookingForAJobDescription}\r\n            </div>\r\n\r\n            <div>\r\n                <b> About me: </b> {profile.aboutMe}\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contactProfileInfo}>{contactTitle} : {contactValue}</div>\r\n}\r\nexport default ProfileINfo;","import React, {Component} from 'react';\r\nimport s from './Post.module.css';\r\nimport profileImg from '../../../../assets/images/profile.png'\r\n\r\nconst Post = (props) => {\r\n    // const date = new Date().toLocaleDateString()\r\n    // const time = new Date().toLocaleTimeString()\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img src={profileImg}/>\r\n            {props.message}\r\n            <div className={s.time}>\r\n                {props.date}\r\n            </div>\r\n            <div>\r\n                <span>  like </span> {props.likesCount}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {useEffect} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post'\r\nimport cn from \"classnames\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport style from \"../../Profile/ProfileInfo/ProfileInfo.module.css\"\r\nimport styless from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport {TextareaControl} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} key={p.id} likesCount={p.likesCount} date={p.date} />)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        props.profile ?\r\n            <div className={s.postsBlock}>\r\n                <h3> My posts </h3>\r\n                <AddNewPostForm onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div> : null\r\n\r\n    )\r\n});\r\n\r\n\r\nlet AddNewPostForm = (props) => {\r\n    const {\r\n        formState: {errors, isSubmitSuccessful},\r\n        handleSubmit,\r\n        reset,\r\n        control,\r\n        formState\r\n    } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        props.onSubmit(data)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (formState.isSubmitSuccessful) {\r\n            reset({something: 'newPostText'});\r\n        }\r\n    }, [formState, reset]);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={styless.textArea}>\r\n                <Controller\r\n                    control={control}\r\n                    name=\"newPostText\"\r\n                    rules={{\r\n                        required: \"Поле обязательно к заполнению\", maxLength: {\r\n                            value: 100,\r\n                            message: \"Max length is 100 symbols\"\r\n                        }\r\n                    }}\r\n                    defaultValue=\"\"\r\n                    render={({field}) => (\r\n                        <TextField\r\n                            {...field}\r\n                            multiline\r\n                            rows={3}\r\n                            label=\"Введите текст поста\"\r\n                            onChange={(e) => field.onChange(e)}\r\n                            value={field.value}\r\n                            error={errors.newPostText?.message}\r\n                            helperText={errors.newPostText?.message}\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n            <Button variant=\"outlined\" type=\"submit\">Добавить пост</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React, {Component} from 'react';\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n        profile: state.profilePage.profile,\r\n        auth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateNewPostText: (text) => {\r\n//             dispatch(updateNewPostTextCreator(text));\r\n//         },\r\n//         addPost: () => {\r\n//             dispatch(addPostCreator());\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addPost})\r\n)(MyPosts)\r\n\r\n\r\n// const MyPostsContainer = connect(mapStateToProps, {\r\n//     addPost\r\n// })(MyPosts);\r\n\r\n// export default MyPostsContainer;","import React, {Component} from 'react';\r\nimport ProfileINfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport style from \"../Profile/ProfileInfo/ProfileInfo.module.css\"\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div className={style.profilePage}>\r\n\r\n            <ProfileINfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}\r\n                         userId={props.userId} auth={props.auth} isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto} saveProfile={props.saveProfile} changeStateEditMode={props.changeStateEditMode}/>\r\n            { !props.stateEditMode && !props.userIdUrl && <MyPostsContainer/> }\r\n\r\n        </div>)\r\n}\r\n\r\nexport default Profile;\r\n","import React, {Component, useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {\r\n    changeStateEditMode,\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {withLogout} from \"../../hoc/withLogout\";\r\nimport {getUsers} from \"../../redux/users-selectors\";\r\n\r\n\r\nfunction ProfileContainerWithHooks(props) {\r\n     let refreshProfile = () => {\r\n         let userId = props.match.params.userId || props.userId;\r\n         if (!userId) {\r\n             props.history.push(\"/login\")\r\n         }\r\n         props.getUserProfile(userId);\r\n         props.getStatus(userId);\r\n     }\r\n\r\n     useEffect(() => {\r\n         refreshProfile();\r\n     }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    }, [props.match.params.userId])\r\n\r\n        return (\r\n            <Profile {...props} profile={props.profile} status={props.status}\r\n                     updateStatus={props.updateStatus} isOwner={!props.match.params.userId}\r\n                     savePhoto={props.savePhoto} saveProfile={props.saveProfile}\r\n                     changeStateEditMode={props.changeStateEditMode} userId={props.userId} userIdUrl={props.match.params.userId}/>\r\n        )\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userId: state.auth.userId,\r\n        auth: state.auth.isAuth,\r\n        formSaved: state.profilePage.formSaved,\r\n        stateEditMode: state.profilePage.stateEditMode\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile, changeStateEditMode}),\r\n    withRouter,\r\n    // withLogout,\r\n    withAuthRedirect\r\n)(ProfileContainerWithHooks)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n//\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);\r\n"],"sourceRoot":""}
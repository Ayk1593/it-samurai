{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","ava","src","profileImg","to","id","name","Message","message","AddNewPostForm","useForm","formState","errors","handleSubmit","isValid","touchedFields","reset","control","useEffect","isSubmitSuccessful","newMessageBody","onSubmit","data","style","textArea","rules","required","maxLength","value","render","field","TextField","label","multiline","rows","onChange","e","error","helperText","Button","variant","type","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messageElements","messages","m","isAuth","dialogsItems","values","sendMessage","compose","connect","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,IAAM,qBAAqB,OAAS,0B,uLCmBhOC,EAdI,SAACC,GAChB,OACI,qBAAKC,UAAWC,IAAEC,OAAS,GAAKD,IAAEE,OAAlC,SACG,sBAAKH,UAAWC,IAAEG,IAAlB,UACI,qBAAKC,IAAKC,MAEb,eAAC,IAAD,CAASC,GAAI,YAAcR,EAAMS,GAAjC,gBAAyCT,EAAMU,KAA/C,cCAGC,EAPC,SAACX,GACb,OACI,sBAAKC,UAAWC,IAAEU,QAAlB,cAA6BZ,EAAMY,QAAnC,Q,6DCuCJC,EAAiB,SAACb,GAClB,MAMIc,cANJ,IACIC,UAAYC,EADhB,EACgBA,OACZC,GAFJ,EACwBC,QADxB,EACiCC,cADjC,EAEIF,cACAG,EAHJ,EAGIA,MACAC,EAJJ,EAIIA,QACAN,EALJ,EAKIA,UAaJ,OANAO,qBAAU,WACFP,EAAUQ,oBACVH,EAAM,CAACI,eAAgB,OAE5B,CAACT,EAAWK,IAInB,uBAAMK,SAAUR,GAZK,SAACS,GACd1B,EAAMyB,SAASC,MAWvB,UACI,qBAAKzB,UAAW0B,IAAMC,SAAtB,SACI,cAAC,IAAD,CACIP,QAASA,EACTX,KAAK,iBACLmB,MAAO,CAACC,SAAU,kKAAiCC,UAAW,CACtDC,MAAO,IACPpB,QAAS,8BAEjBqB,OAAQ,oBAAEC,EAAF,EAAEA,MAAF,OACJ,cAACC,EAAA,EAAD,CACIC,MAAM,mIACNC,WAAS,EACTC,KAAM,EACNC,SAAU,SAACC,GAAD,OAAON,EAAMK,SAASC,IAChCR,MAAOE,EAAMF,MACbS,MAAK,UAAEzB,EAAOQ,sBAAT,aAAE,EAAuBZ,QAC9B8B,WAAU,UAAE1B,EAAOQ,sBAAT,aAAE,EAAuBZ,eAK/C,cAAC+B,EAAA,EAAD,CAAQC,QAAQ,WAAWC,KAAK,SAAhC,6BAMOC,EA/EC,SAAC9C,GAEb,IAAI+C,EAAQ/C,EAAMgD,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY1C,KAAM0C,EAAE1C,KAAiBD,GAAI2C,EAAE3C,IAAZ2C,EAAE3C,OAC1E4C,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS3C,QAAS2C,EAAE3C,SAAc2C,EAAE9C,OAOlF,OAAKT,EAAMwD,OAGP,sBAAKvD,UAAWC,IAAEgD,QAAlB,UACI,qBAAKjD,UAAWC,IAAEuD,aAAlB,SACKR,IAGL,qBAAKhD,UAAWC,IAAEoD,SAAlB,SACKD,IAEL,8BACI,cAAC,EAAD,CAAgB5B,SAhBR,SAACiC,GACjB1D,EAAM2D,YAAYD,EAAOlC,wBAGH,cAAC,IAAD,CAAUhB,GAAI,Y,yBCF7BoD,sBACXC,aAlBkB,SAACd,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAgBE,CACrBW,kBAEJG,IAJWF,CAMdd","file":"static/js/4.5faba9de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1-3GE\",\"dialogsItems\":\"Dialogs_dialogsItems__eW6jC\",\"active\":\"Dialogs_active__KA-k1\",\"messages\":\"Dialogs_messages__27VPr\",\"message\":\"Dialogs_message__3_FLD\",\"ava\":\"Dialogs_ava__KNwph\",\"dialog\":\"Dialogs_dialog__KS8Uy\"};","import {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css';\r\nimport React from \"react\";\r\nimport profileImg from '../../../assets/images/profile.png';\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + '' + s.active}>\r\n           <div className={s.ava} >\r\n               <img src={profileImg}/>\r\n\r\n            <NavLink to={'/dialogs/' + props.id}>   {props.name}  </NavLink>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}> {props.message} </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React, {Component, useEffect} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport { Textarea, TextareaNew} from \"../common/FormsControls/FormsControls\";\r\nimport styles from \"../common/FormsControls/FormsControls.module.css\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport cn from \"classnames\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport style from \"../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messageElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n            </div>\r\n            <div>\r\n                <AddNewPostForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet AddNewPostForm = (props) => {\r\n    const {\r\n        formState: {errors, isValid, touchedFields},\r\n        handleSubmit,\r\n        reset,\r\n        control,\r\n        formState\r\n    } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        props.onSubmit(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (formState.isSubmitSuccessful) {\r\n            reset({newMessageBody: ''});\r\n        }\r\n    }, [formState, reset]);\r\n\r\n    return (\r\n\r\n<form onSubmit={handleSubmit(onSubmit)}>\r\n    <div className={style.textArea}>\r\n        <Controller\r\n            control={control}\r\n            name=\"newMessageBody\"\r\n            rules={{required: \"Поле обязательно к заполнению\", maxLength: {\r\n                    value: 100,\r\n                    message: \"Max length is 100 symbols\"\r\n                }}}\r\n            render={({field}) => (\r\n                <TextField\r\n                    label=\"Введите текст сообщения\"\r\n                    multiline\r\n                    rows={3}\r\n                    onChange={(e) => field.onChange(e)}\r\n                    value={field.value}\r\n                    error={errors.newMessageBody?.message}\r\n                    helperText={errors.newMessageBody?.message}\r\n                />\r\n            )}\r\n        />\r\n    </div>\r\n        <Button variant=\"outlined\" type=\"submit\">Add message</Button>\r\n\r\n</form> ) }\r\n\r\n\r\n\r\nexport default Dialogs;","import React, {Component} from 'react';\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateNewMessageBody: (body) => {\r\n//             dispatch(updateNewMessageBodyCreator(body));\r\n//         },\r\n//         sendMessage: () => {\r\n//             dispatch(sendMessageCreator());\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        sendMessage\r\n    }),\r\n    withAuthRedirect\r\n)\r\n(Dialogs)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, {\r\n//     updateNewMessageBody,\r\n//     sendMessage\r\n// })(AuthRedirectComponent);\r\n\r\n"],"sourceRoot":""}